// Code generated by msgpackgen. DO NOT EDIT.

package goserbench

import (
	"fmt"
	msgpack "github.com/shamaton/msgpackgen/msgpack"
	dec "github.com/shamaton/msgpackgen/msgpack/dec"
	enc "github.com/shamaton/msgpackgen/msgpack/enc"
	"time"
)

// RegisterGeneratedResolver registers generated resolver.
func RegisterGeneratedResolver() {
	msgpack.SetResolver(___encodeAsMap, ___encodeAsArray, ___decodeAsMap, ___decodeAsArray)
}

// encode
func ___encode(i interface{}) ([]byte, error) {
	if msgpack.StructAsArray() {
		return ___encodeAsArray(i)
	} else {
		return ___encodeAsMap(i)
	}
}

// encodeAsArray
func ___encodeAsArray(i interface{}) ([]byte, error) {
	switch v := i.(type) {
	case ColferA:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeColferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayColferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "ColferA", size, offset)
		}
		return b, err
	case *ColferA:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeColferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayColferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "ColferA", size, offset)
		}
		return b, err
	case FlatBufferA:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeFlatBufferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayFlatBufferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "FlatBufferA", size, offset)
		}
		return b, err
	case *FlatBufferA:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeFlatBufferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayFlatBufferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "FlatBufferA", size, offset)
		}
		return b, err
	case GencodeUnsafeA:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeGencodeUnsafeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayGencodeUnsafeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "GencodeUnsafeA", size, offset)
		}
		return b, err
	case *GencodeUnsafeA:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeGencodeUnsafeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayGencodeUnsafeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "GencodeUnsafeA", size, offset)
		}
		return b, err
	case GencodeA:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeGencodeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayGencodeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "GencodeA", size, offset)
		}
		return b, err
	case *GencodeA:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeGencodeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayGencodeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "GencodeA", size, offset)
		}
		return b, err
	case BebopBufA:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeBebopBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayBebopBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "BebopBufA", size, offset)
		}
		return b, err
	case *BebopBufA:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeBebopBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayBebopBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "BebopBufA", size, offset)
		}
		return b, err
	case GogoProtoBufA:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeGogoProtoBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayGogoProtoBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "GogoProtoBufA", size, offset)
		}
		return b, err
	case *GogoProtoBufA:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeGogoProtoBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayGogoProtoBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "GogoProtoBufA", size, offset)
		}
		return b, err
	case mumSerializer:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizemumSerializer_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArraymumSerializer_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "mumSerializer", size, offset)
		}
		return b, err
	case *mumSerializer:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizemumSerializer_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArraymumSerializer_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "mumSerializer", size, offset)
		}
		return b, err
	case A:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "A", size, offset)
		}
		return b, err
	case *A:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "A", size, offset)
		}
		return b, err
	case NoTimeA:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeNoTimeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayNoTimeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "NoTimeA", size, offset)
		}
		return b, err
	case *NoTimeA:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeNoTimeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayNoTimeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "NoTimeA", size, offset)
		}
		return b, err
	case NoTimeNoStringNoFloatA:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeNoTimeNoStringNoFloatA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayNoTimeNoStringNoFloatA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "NoTimeNoStringNoFloatA", size, offset)
		}
		return b, err
	case *NoTimeNoStringNoFloatA:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeNoTimeNoStringNoFloatA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayNoTimeNoStringNoFloatA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "NoTimeNoStringNoFloatA", size, offset)
		}
		return b, err
	case AvroA:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeAvroA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayAvroA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "AvroA", size, offset)
		}
		return b, err
	case *AvroA:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeAvroA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayAvroA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "AvroA", size, offset)
		}
		return b, err
	case Avro2Txt:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeAvro2Txt_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayAvro2Txt_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "Avro2Txt", size, offset)
		}
		return b, err
	case *Avro2Txt:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeAvro2Txt_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayAvro2Txt_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "Avro2Txt", size, offset)
		}
		return b, err
	case Avro2Bin:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeAvro2Bin_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayAvro2Bin_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "Avro2Bin", size, offset)
		}
		return b, err
	case *Avro2Bin:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeAvro2Bin_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayAvro2Bin_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "Avro2Bin", size, offset)
		}
		return b, err
	case XDRA:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeXDRA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayXDRA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "XDRA", size, offset)
		}
		return b, err
	case *XDRA:
		encoder := enc.NewEncoder()
		size, err := ___calcArraySizeXDRA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeArrayXDRA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "XDRA", size, offset)
		}
		return b, err
	}
	return nil, nil
}

// encodeAsMap
func ___encodeAsMap(i interface{}) ([]byte, error) {
	switch v := i.(type) {
	case ColferA:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeColferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapColferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "ColferA", size, offset)
		}
		return b, err
	case *ColferA:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeColferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapColferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "ColferA", size, offset)
		}
		return b, err
	case FlatBufferA:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeFlatBufferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapFlatBufferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "FlatBufferA", size, offset)
		}
		return b, err
	case *FlatBufferA:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeFlatBufferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapFlatBufferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "FlatBufferA", size, offset)
		}
		return b, err
	case GencodeUnsafeA:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeGencodeUnsafeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapGencodeUnsafeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "GencodeUnsafeA", size, offset)
		}
		return b, err
	case *GencodeUnsafeA:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeGencodeUnsafeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapGencodeUnsafeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "GencodeUnsafeA", size, offset)
		}
		return b, err
	case GencodeA:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeGencodeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapGencodeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "GencodeA", size, offset)
		}
		return b, err
	case *GencodeA:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeGencodeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapGencodeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "GencodeA", size, offset)
		}
		return b, err
	case BebopBufA:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeBebopBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapBebopBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "BebopBufA", size, offset)
		}
		return b, err
	case *BebopBufA:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeBebopBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapBebopBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "BebopBufA", size, offset)
		}
		return b, err
	case GogoProtoBufA:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeGogoProtoBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapGogoProtoBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "GogoProtoBufA", size, offset)
		}
		return b, err
	case *GogoProtoBufA:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeGogoProtoBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapGogoProtoBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "GogoProtoBufA", size, offset)
		}
		return b, err
	case mumSerializer:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizemumSerializer_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapmumSerializer_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "mumSerializer", size, offset)
		}
		return b, err
	case *mumSerializer:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizemumSerializer_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapmumSerializer_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "mumSerializer", size, offset)
		}
		return b, err
	case A:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "A", size, offset)
		}
		return b, err
	case *A:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "A", size, offset)
		}
		return b, err
	case NoTimeA:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeNoTimeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapNoTimeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "NoTimeA", size, offset)
		}
		return b, err
	case *NoTimeA:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeNoTimeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapNoTimeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "NoTimeA", size, offset)
		}
		return b, err
	case NoTimeNoStringNoFloatA:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeNoTimeNoStringNoFloatA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapNoTimeNoStringNoFloatA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "NoTimeNoStringNoFloatA", size, offset)
		}
		return b, err
	case *NoTimeNoStringNoFloatA:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeNoTimeNoStringNoFloatA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapNoTimeNoStringNoFloatA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "NoTimeNoStringNoFloatA", size, offset)
		}
		return b, err
	case AvroA:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeAvroA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapAvroA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "AvroA", size, offset)
		}
		return b, err
	case *AvroA:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeAvroA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapAvroA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "AvroA", size, offset)
		}
		return b, err
	case Avro2Txt:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeAvro2Txt_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapAvro2Txt_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "Avro2Txt", size, offset)
		}
		return b, err
	case *Avro2Txt:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeAvro2Txt_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapAvro2Txt_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "Avro2Txt", size, offset)
		}
		return b, err
	case Avro2Bin:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeAvro2Bin_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapAvro2Bin_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "Avro2Bin", size, offset)
		}
		return b, err
	case *Avro2Bin:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeAvro2Bin_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapAvro2Bin_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "Avro2Bin", size, offset)
		}
		return b, err
	case XDRA:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeXDRA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapXDRA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "XDRA", size, offset)
		}
		return b, err
	case *XDRA:
		encoder := enc.NewEncoder()
		size, err := ___calcMapSizeXDRA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder)
		if err != nil {
			return nil, err
		}
		encoder.MakeBytes(size)
		b, offset, err := ___encodeMapXDRA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, encoder, 0)
		if err != nil {
			return nil, err
		}
		if size != offset {
			return nil, fmt.Errorf("%s size / offset different %d : %d", "XDRA", size, offset)
		}
		return b, err
	}
	return nil, nil
}

// decode
func ___decode(data []byte, i interface{}) (bool, error) {
	if msgpack.StructAsArray() {
		return ___decodeAsArray(data, i)
	} else {
		return ___decodeAsMap(data, i)
	}
}

// decodeAsArray
func ___decodeAsArray(data []byte, i interface{}) (bool, error) {
	switch v := i.(type) {
	case *ColferA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayColferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **ColferA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayColferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *FlatBufferA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayFlatBufferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **FlatBufferA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayFlatBufferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *GencodeUnsafeA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayGencodeUnsafeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **GencodeUnsafeA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayGencodeUnsafeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *GencodeA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayGencodeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **GencodeA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayGencodeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *BebopBufA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayBebopBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **BebopBufA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayBebopBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *GogoProtoBufA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayGogoProtoBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **GogoProtoBufA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayGogoProtoBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *mumSerializer:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArraymumSerializer_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **mumSerializer:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArraymumSerializer_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *A:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **A:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *NoTimeA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayNoTimeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **NoTimeA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayNoTimeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *NoTimeNoStringNoFloatA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayNoTimeNoStringNoFloatA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **NoTimeNoStringNoFloatA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayNoTimeNoStringNoFloatA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *AvroA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayAvroA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **AvroA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayAvroA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *Avro2Txt:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayAvro2Txt_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **Avro2Txt:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayAvro2Txt_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *Avro2Bin:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayAvro2Bin_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **Avro2Bin:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayAvro2Bin_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *XDRA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayXDRA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **XDRA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeArrayXDRA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	}
	return false, nil
}

// decodeAsMap
func ___decodeAsMap(data []byte, i interface{}) (bool, error) {
	switch v := i.(type) {
	case *ColferA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapColferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **ColferA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapColferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *FlatBufferA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapFlatBufferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **FlatBufferA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapFlatBufferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *GencodeUnsafeA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapGencodeUnsafeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **GencodeUnsafeA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapGencodeUnsafeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *GencodeA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapGencodeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **GencodeA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapGencodeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *BebopBufA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapBebopBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **BebopBufA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapBebopBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *GogoProtoBufA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapGogoProtoBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **GogoProtoBufA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapGogoProtoBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *mumSerializer:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapmumSerializer_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **mumSerializer:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapmumSerializer_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *A:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **A:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *NoTimeA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapNoTimeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **NoTimeA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapNoTimeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *NoTimeNoStringNoFloatA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapNoTimeNoStringNoFloatA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **NoTimeNoStringNoFloatA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapNoTimeNoStringNoFloatA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *AvroA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapAvroA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **AvroA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapAvroA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *Avro2Txt:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapAvro2Txt_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **Avro2Txt:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapAvro2Txt_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *Avro2Bin:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapAvro2Bin_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **Avro2Bin:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapAvro2Bin_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case *XDRA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapXDRA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	case **XDRA:
		decoder := dec.NewDecoder(data)
		offset, err := ___decodeMapXDRA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(*v, decoder, 0)
		if err == nil && offset != decoder.Len() {
			return true, fmt.Errorf("read length is different [%d] [%d] ", offset, decoder.Len())
		}
		return true, err
	}
	return false, nil
}

// calculate size from github.com/alecthomas/go_serialization_benchmarks.ColferA
func ___calcArraySizeColferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v ColferA, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(6)
	size += encoder.CalcString(v.Name)
	size += encoder.CalcTime(v.BirthDay)
	size += encoder.CalcString(v.Phone)
	size += encoder.CalcInt32(v.Siblings)
	size += encoder.CalcBool(v.Spouse)
	size += encoder.CalcFloat64(v.Money)
	return size, nil
}

// calculate size from github.com/alecthomas/go_serialization_benchmarks.ColferA
func ___calcMapSizeColferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v ColferA, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(6)
	size += encoder.CalcStringFix(4)
	size += encoder.CalcString(v.Name)
	size += encoder.CalcStringFix(8)
	size += encoder.CalcTime(v.BirthDay)
	size += encoder.CalcStringFix(5)
	size += encoder.CalcString(v.Phone)
	size += encoder.CalcStringFix(8)
	size += encoder.CalcInt32(v.Siblings)
	size += encoder.CalcStringFix(6)
	size += encoder.CalcBool(v.Spouse)
	size += encoder.CalcStringFix(5)
	size += encoder.CalcFloat64(v.Money)
	return size, nil
}

// encode from github.com/alecthomas/go_serialization_benchmarks.ColferA
func ___encodeArrayColferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v ColferA, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsArray(6, offset)
	offset = encoder.WriteString(v.Name, offset)
	offset = encoder.WriteTime(v.BirthDay, offset)
	offset = encoder.WriteString(v.Phone, offset)
	offset = encoder.WriteInt32(v.Siblings, offset)
	offset = encoder.WriteBool(v.Spouse, offset)
	offset = encoder.WriteFloat64(v.Money, offset)
	return encoder.EncodedBytes(), offset, err
}

// encode from github.com/alecthomas/go_serialization_benchmarks.ColferA
func ___encodeMapColferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v ColferA, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsMap(6, offset)
	offset = encoder.WriteStringFix("Name", 4, offset)
	offset = encoder.WriteString(v.Name, offset)
	offset = encoder.WriteStringFix("BirthDay", 8, offset)
	offset = encoder.WriteTime(v.BirthDay, offset)
	offset = encoder.WriteStringFix("Phone", 5, offset)
	offset = encoder.WriteString(v.Phone, offset)
	offset = encoder.WriteStringFix("Siblings", 8, offset)
	offset = encoder.WriteInt32(v.Siblings, offset)
	offset = encoder.WriteStringFix("Spouse", 6, offset)
	offset = encoder.WriteBool(v.Spouse, offset)
	offset = encoder.WriteStringFix("Money", 5, offset)
	offset = encoder.WriteFloat64(v.Money, offset)
	return encoder.EncodedBytes(), offset, err
}

// decode to github.com/alecthomas/go_serialization_benchmarks.ColferA
func ___decodeArrayColferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v *ColferA, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(6, offset)
	if err != nil {
		return 0, err
	}
	{
		var vv string
		vv, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		v.Name = vv
	}
	{
		var vv time.Time
		vv, offset, err = decoder.AsDateTime(offset)
		if err != nil {
			return 0, err
		}
		v.BirthDay = vv
	}
	{
		var vv string
		vv, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		v.Phone = vv
	}
	{
		var vv int32
		vv, offset, err = decoder.AsInt32(offset)
		if err != nil {
			return 0, err
		}
		v.Siblings = vv
	}
	{
		var vv bool
		vv, offset, err = decoder.AsBool(offset)
		if err != nil {
			return 0, err
		}
		v.Spouse = vv
	}
	{
		var vv float64
		vv, offset, err = decoder.AsFloat64(offset)
		if err != nil {
			return 0, err
		}
		v.Money = vv
	}
	return offset, err
}

// decode to github.com/alecthomas/go_serialization_benchmarks.ColferA
func ___decodeMapColferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v *ColferA, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(6, offset)
	if err != nil {
		return 0, err
	}
	count := 0
	for count < 6 {
		var s string
		s, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		switch s {
		case "Name":
			{
				var vv string
				vv, offset, err = decoder.AsString(offset)
				if err != nil {
					return 0, err
				}
				v.Name = vv
			}
			count++
		case "BirthDay":
			{
				var vv time.Time
				vv, offset, err = decoder.AsDateTime(offset)
				if err != nil {
					return 0, err
				}
				v.BirthDay = vv
			}
			count++
		case "Phone":
			{
				var vv string
				vv, offset, err = decoder.AsString(offset)
				if err != nil {
					return 0, err
				}
				v.Phone = vv
			}
			count++
		case "Siblings":
			{
				var vv int32
				vv, offset, err = decoder.AsInt32(offset)
				if err != nil {
					return 0, err
				}
				v.Siblings = vv
			}
			count++
		case "Spouse":
			{
				var vv bool
				vv, offset, err = decoder.AsBool(offset)
				if err != nil {
					return 0, err
				}
				v.Spouse = vv
			}
			count++
		case "Money":
			{
				var vv float64
				vv, offset, err = decoder.AsFloat64(offset)
				if err != nil {
					return 0, err
				}
				v.Money = vv
			}
			count++
		default:
			return 0, fmt.Errorf("unknown key[%s] found", s)
		}
	}
	return offset, err
}

// calculate size from github.com/alecthomas/go_serialization_benchmarks.FlatBufferA
func ___calcArraySizeFlatBufferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v FlatBufferA, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(0)
	return size, nil
}

// calculate size from github.com/alecthomas/go_serialization_benchmarks.FlatBufferA
func ___calcMapSizeFlatBufferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v FlatBufferA, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(0)
	return size, nil
}

// encode from github.com/alecthomas/go_serialization_benchmarks.FlatBufferA
func ___encodeArrayFlatBufferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v FlatBufferA, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsArray(0, offset)
	return encoder.EncodedBytes(), offset, err
}

// encode from github.com/alecthomas/go_serialization_benchmarks.FlatBufferA
func ___encodeMapFlatBufferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v FlatBufferA, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsMap(0, offset)
	return encoder.EncodedBytes(), offset, err
}

// decode to github.com/alecthomas/go_serialization_benchmarks.FlatBufferA
func ___decodeArrayFlatBufferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v *FlatBufferA, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(0, offset)
	if err != nil {
		return 0, err
	}
	return offset, err
}

// decode to github.com/alecthomas/go_serialization_benchmarks.FlatBufferA
func ___decodeMapFlatBufferA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v *FlatBufferA, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(0, offset)
	if err != nil {
		return 0, err
	}
	count := 0
	for count < 0 {
		var s string
		s, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		switch s {
		default:
			return 0, fmt.Errorf("unknown key[%s] found", s)
		}
	}
	return offset, err
}

// calculate size from github.com/alecthomas/go_serialization_benchmarks.GencodeUnsafeA
func ___calcArraySizeGencodeUnsafeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v GencodeUnsafeA, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(6)
	size += encoder.CalcString(v.Name)
	size += encoder.CalcInt64(v.BirthDay)
	size += encoder.CalcString(v.Phone)
	size += encoder.CalcInt32(v.Siblings)
	size += encoder.CalcBool(v.Spouse)
	size += encoder.CalcFloat64(v.Money)
	return size, nil
}

// calculate size from github.com/alecthomas/go_serialization_benchmarks.GencodeUnsafeA
func ___calcMapSizeGencodeUnsafeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v GencodeUnsafeA, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(6)
	size += encoder.CalcStringFix(4)
	size += encoder.CalcString(v.Name)
	size += encoder.CalcStringFix(8)
	size += encoder.CalcInt64(v.BirthDay)
	size += encoder.CalcStringFix(5)
	size += encoder.CalcString(v.Phone)
	size += encoder.CalcStringFix(8)
	size += encoder.CalcInt32(v.Siblings)
	size += encoder.CalcStringFix(6)
	size += encoder.CalcBool(v.Spouse)
	size += encoder.CalcStringFix(5)
	size += encoder.CalcFloat64(v.Money)
	return size, nil
}

// encode from github.com/alecthomas/go_serialization_benchmarks.GencodeUnsafeA
func ___encodeArrayGencodeUnsafeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v GencodeUnsafeA, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsArray(6, offset)
	offset = encoder.WriteString(v.Name, offset)
	offset = encoder.WriteInt64(v.BirthDay, offset)
	offset = encoder.WriteString(v.Phone, offset)
	offset = encoder.WriteInt32(v.Siblings, offset)
	offset = encoder.WriteBool(v.Spouse, offset)
	offset = encoder.WriteFloat64(v.Money, offset)
	return encoder.EncodedBytes(), offset, err
}

// encode from github.com/alecthomas/go_serialization_benchmarks.GencodeUnsafeA
func ___encodeMapGencodeUnsafeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v GencodeUnsafeA, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsMap(6, offset)
	offset = encoder.WriteStringFix("Name", 4, offset)
	offset = encoder.WriteString(v.Name, offset)
	offset = encoder.WriteStringFix("BirthDay", 8, offset)
	offset = encoder.WriteInt64(v.BirthDay, offset)
	offset = encoder.WriteStringFix("Phone", 5, offset)
	offset = encoder.WriteString(v.Phone, offset)
	offset = encoder.WriteStringFix("Siblings", 8, offset)
	offset = encoder.WriteInt32(v.Siblings, offset)
	offset = encoder.WriteStringFix("Spouse", 6, offset)
	offset = encoder.WriteBool(v.Spouse, offset)
	offset = encoder.WriteStringFix("Money", 5, offset)
	offset = encoder.WriteFloat64(v.Money, offset)
	return encoder.EncodedBytes(), offset, err
}

// decode to github.com/alecthomas/go_serialization_benchmarks.GencodeUnsafeA
func ___decodeArrayGencodeUnsafeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v *GencodeUnsafeA, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(6, offset)
	if err != nil {
		return 0, err
	}
	{
		var vv string
		vv, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		v.Name = vv
	}
	{
		var vv int64
		vv, offset, err = decoder.AsInt64(offset)
		if err != nil {
			return 0, err
		}
		v.BirthDay = vv
	}
	{
		var vv string
		vv, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		v.Phone = vv
	}
	{
		var vv int32
		vv, offset, err = decoder.AsInt32(offset)
		if err != nil {
			return 0, err
		}
		v.Siblings = vv
	}
	{
		var vv bool
		vv, offset, err = decoder.AsBool(offset)
		if err != nil {
			return 0, err
		}
		v.Spouse = vv
	}
	{
		var vv float64
		vv, offset, err = decoder.AsFloat64(offset)
		if err != nil {
			return 0, err
		}
		v.Money = vv
	}
	return offset, err
}

// decode to github.com/alecthomas/go_serialization_benchmarks.GencodeUnsafeA
func ___decodeMapGencodeUnsafeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v *GencodeUnsafeA, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(6, offset)
	if err != nil {
		return 0, err
	}
	count := 0
	for count < 6 {
		var s string
		s, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		switch s {
		case "Name":
			{
				var vv string
				vv, offset, err = decoder.AsString(offset)
				if err != nil {
					return 0, err
				}
				v.Name = vv
			}
			count++
		case "BirthDay":
			{
				var vv int64
				vv, offset, err = decoder.AsInt64(offset)
				if err != nil {
					return 0, err
				}
				v.BirthDay = vv
			}
			count++
		case "Phone":
			{
				var vv string
				vv, offset, err = decoder.AsString(offset)
				if err != nil {
					return 0, err
				}
				v.Phone = vv
			}
			count++
		case "Siblings":
			{
				var vv int32
				vv, offset, err = decoder.AsInt32(offset)
				if err != nil {
					return 0, err
				}
				v.Siblings = vv
			}
			count++
		case "Spouse":
			{
				var vv bool
				vv, offset, err = decoder.AsBool(offset)
				if err != nil {
					return 0, err
				}
				v.Spouse = vv
			}
			count++
		case "Money":
			{
				var vv float64
				vv, offset, err = decoder.AsFloat64(offset)
				if err != nil {
					return 0, err
				}
				v.Money = vv
			}
			count++
		default:
			return 0, fmt.Errorf("unknown key[%s] found", s)
		}
	}
	return offset, err
}

// calculate size from github.com/alecthomas/go_serialization_benchmarks.GencodeA
func ___calcArraySizeGencodeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v GencodeA, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(6)
	size += encoder.CalcString(v.Name)
	size += encoder.CalcTime(v.BirthDay)
	size += encoder.CalcString(v.Phone)
	size += encoder.CalcInt32(v.Siblings)
	size += encoder.CalcBool(v.Spouse)
	size += encoder.CalcFloat64(v.Money)
	return size, nil
}

// calculate size from github.com/alecthomas/go_serialization_benchmarks.GencodeA
func ___calcMapSizeGencodeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v GencodeA, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(6)
	size += encoder.CalcStringFix(4)
	size += encoder.CalcString(v.Name)
	size += encoder.CalcStringFix(8)
	size += encoder.CalcTime(v.BirthDay)
	size += encoder.CalcStringFix(5)
	size += encoder.CalcString(v.Phone)
	size += encoder.CalcStringFix(8)
	size += encoder.CalcInt32(v.Siblings)
	size += encoder.CalcStringFix(6)
	size += encoder.CalcBool(v.Spouse)
	size += encoder.CalcStringFix(5)
	size += encoder.CalcFloat64(v.Money)
	return size, nil
}

// encode from github.com/alecthomas/go_serialization_benchmarks.GencodeA
func ___encodeArrayGencodeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v GencodeA, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsArray(6, offset)
	offset = encoder.WriteString(v.Name, offset)
	offset = encoder.WriteTime(v.BirthDay, offset)
	offset = encoder.WriteString(v.Phone, offset)
	offset = encoder.WriteInt32(v.Siblings, offset)
	offset = encoder.WriteBool(v.Spouse, offset)
	offset = encoder.WriteFloat64(v.Money, offset)
	return encoder.EncodedBytes(), offset, err
}

// encode from github.com/alecthomas/go_serialization_benchmarks.GencodeA
func ___encodeMapGencodeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v GencodeA, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsMap(6, offset)
	offset = encoder.WriteStringFix("Name", 4, offset)
	offset = encoder.WriteString(v.Name, offset)
	offset = encoder.WriteStringFix("BirthDay", 8, offset)
	offset = encoder.WriteTime(v.BirthDay, offset)
	offset = encoder.WriteStringFix("Phone", 5, offset)
	offset = encoder.WriteString(v.Phone, offset)
	offset = encoder.WriteStringFix("Siblings", 8, offset)
	offset = encoder.WriteInt32(v.Siblings, offset)
	offset = encoder.WriteStringFix("Spouse", 6, offset)
	offset = encoder.WriteBool(v.Spouse, offset)
	offset = encoder.WriteStringFix("Money", 5, offset)
	offset = encoder.WriteFloat64(v.Money, offset)
	return encoder.EncodedBytes(), offset, err
}

// decode to github.com/alecthomas/go_serialization_benchmarks.GencodeA
func ___decodeArrayGencodeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v *GencodeA, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(6, offset)
	if err != nil {
		return 0, err
	}
	{
		var vv string
		vv, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		v.Name = vv
	}
	{
		var vv time.Time
		vv, offset, err = decoder.AsDateTime(offset)
		if err != nil {
			return 0, err
		}
		v.BirthDay = vv
	}
	{
		var vv string
		vv, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		v.Phone = vv
	}
	{
		var vv int32
		vv, offset, err = decoder.AsInt32(offset)
		if err != nil {
			return 0, err
		}
		v.Siblings = vv
	}
	{
		var vv bool
		vv, offset, err = decoder.AsBool(offset)
		if err != nil {
			return 0, err
		}
		v.Spouse = vv
	}
	{
		var vv float64
		vv, offset, err = decoder.AsFloat64(offset)
		if err != nil {
			return 0, err
		}
		v.Money = vv
	}
	return offset, err
}

// decode to github.com/alecthomas/go_serialization_benchmarks.GencodeA
func ___decodeMapGencodeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v *GencodeA, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(6, offset)
	if err != nil {
		return 0, err
	}
	count := 0
	for count < 6 {
		var s string
		s, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		switch s {
		case "Name":
			{
				var vv string
				vv, offset, err = decoder.AsString(offset)
				if err != nil {
					return 0, err
				}
				v.Name = vv
			}
			count++
		case "BirthDay":
			{
				var vv time.Time
				vv, offset, err = decoder.AsDateTime(offset)
				if err != nil {
					return 0, err
				}
				v.BirthDay = vv
			}
			count++
		case "Phone":
			{
				var vv string
				vv, offset, err = decoder.AsString(offset)
				if err != nil {
					return 0, err
				}
				v.Phone = vv
			}
			count++
		case "Siblings":
			{
				var vv int32
				vv, offset, err = decoder.AsInt32(offset)
				if err != nil {
					return 0, err
				}
				v.Siblings = vv
			}
			count++
		case "Spouse":
			{
				var vv bool
				vv, offset, err = decoder.AsBool(offset)
				if err != nil {
					return 0, err
				}
				v.Spouse = vv
			}
			count++
		case "Money":
			{
				var vv float64
				vv, offset, err = decoder.AsFloat64(offset)
				if err != nil {
					return 0, err
				}
				v.Money = vv
			}
			count++
		default:
			return 0, fmt.Errorf("unknown key[%s] found", s)
		}
	}
	return offset, err
}

// calculate size from github.com/alecthomas/go_serialization_benchmarks.BebopBufA
func ___calcArraySizeBebopBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v BebopBufA, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(6)
	size += encoder.CalcString(v.Name)
	size += encoder.CalcUint64(v.BirthDay)
	size += encoder.CalcString(v.Phone)
	size += encoder.CalcInt32(v.Siblings)
	size += encoder.CalcBool(v.Spouse)
	size += encoder.CalcFloat64(v.Money)
	return size, nil
}

// calculate size from github.com/alecthomas/go_serialization_benchmarks.BebopBufA
func ___calcMapSizeBebopBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v BebopBufA, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(6)
	size += encoder.CalcStringFix(4)
	size += encoder.CalcString(v.Name)
	size += encoder.CalcStringFix(8)
	size += encoder.CalcUint64(v.BirthDay)
	size += encoder.CalcStringFix(5)
	size += encoder.CalcString(v.Phone)
	size += encoder.CalcStringFix(8)
	size += encoder.CalcInt32(v.Siblings)
	size += encoder.CalcStringFix(6)
	size += encoder.CalcBool(v.Spouse)
	size += encoder.CalcStringFix(5)
	size += encoder.CalcFloat64(v.Money)
	return size, nil
}

// encode from github.com/alecthomas/go_serialization_benchmarks.BebopBufA
func ___encodeArrayBebopBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v BebopBufA, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsArray(6, offset)
	offset = encoder.WriteString(v.Name, offset)
	offset = encoder.WriteUint64(v.BirthDay, offset)
	offset = encoder.WriteString(v.Phone, offset)
	offset = encoder.WriteInt32(v.Siblings, offset)
	offset = encoder.WriteBool(v.Spouse, offset)
	offset = encoder.WriteFloat64(v.Money, offset)
	return encoder.EncodedBytes(), offset, err
}

// encode from github.com/alecthomas/go_serialization_benchmarks.BebopBufA
func ___encodeMapBebopBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v BebopBufA, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsMap(6, offset)
	offset = encoder.WriteStringFix("Name", 4, offset)
	offset = encoder.WriteString(v.Name, offset)
	offset = encoder.WriteStringFix("BirthDay", 8, offset)
	offset = encoder.WriteUint64(v.BirthDay, offset)
	offset = encoder.WriteStringFix("Phone", 5, offset)
	offset = encoder.WriteString(v.Phone, offset)
	offset = encoder.WriteStringFix("Siblings", 8, offset)
	offset = encoder.WriteInt32(v.Siblings, offset)
	offset = encoder.WriteStringFix("Spouse", 6, offset)
	offset = encoder.WriteBool(v.Spouse, offset)
	offset = encoder.WriteStringFix("Money", 5, offset)
	offset = encoder.WriteFloat64(v.Money, offset)
	return encoder.EncodedBytes(), offset, err
}

// decode to github.com/alecthomas/go_serialization_benchmarks.BebopBufA
func ___decodeArrayBebopBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v *BebopBufA, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(6, offset)
	if err != nil {
		return 0, err
	}
	{
		var vv string
		vv, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		v.Name = vv
	}
	{
		var vv uint64
		vv, offset, err = decoder.AsUint64(offset)
		if err != nil {
			return 0, err
		}
		v.BirthDay = vv
	}
	{
		var vv string
		vv, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		v.Phone = vv
	}
	{
		var vv int32
		vv, offset, err = decoder.AsInt32(offset)
		if err != nil {
			return 0, err
		}
		v.Siblings = vv
	}
	{
		var vv bool
		vv, offset, err = decoder.AsBool(offset)
		if err != nil {
			return 0, err
		}
		v.Spouse = vv
	}
	{
		var vv float64
		vv, offset, err = decoder.AsFloat64(offset)
		if err != nil {
			return 0, err
		}
		v.Money = vv
	}
	return offset, err
}

// decode to github.com/alecthomas/go_serialization_benchmarks.BebopBufA
func ___decodeMapBebopBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v *BebopBufA, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(6, offset)
	if err != nil {
		return 0, err
	}
	count := 0
	for count < 6 {
		var s string
		s, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		switch s {
		case "Name":
			{
				var vv string
				vv, offset, err = decoder.AsString(offset)
				if err != nil {
					return 0, err
				}
				v.Name = vv
			}
			count++
		case "BirthDay":
			{
				var vv uint64
				vv, offset, err = decoder.AsUint64(offset)
				if err != nil {
					return 0, err
				}
				v.BirthDay = vv
			}
			count++
		case "Phone":
			{
				var vv string
				vv, offset, err = decoder.AsString(offset)
				if err != nil {
					return 0, err
				}
				v.Phone = vv
			}
			count++
		case "Siblings":
			{
				var vv int32
				vv, offset, err = decoder.AsInt32(offset)
				if err != nil {
					return 0, err
				}
				v.Siblings = vv
			}
			count++
		case "Spouse":
			{
				var vv bool
				vv, offset, err = decoder.AsBool(offset)
				if err != nil {
					return 0, err
				}
				v.Spouse = vv
			}
			count++
		case "Money":
			{
				var vv float64
				vv, offset, err = decoder.AsFloat64(offset)
				if err != nil {
					return 0, err
				}
				v.Money = vv
			}
			count++
		default:
			return 0, fmt.Errorf("unknown key[%s] found", s)
		}
	}
	return offset, err
}

// calculate size from github.com/alecthomas/go_serialization_benchmarks.GogoProtoBufA
func ___calcArraySizeGogoProtoBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v GogoProtoBufA, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(6)
	size += encoder.CalcString(v.Name)
	size += encoder.CalcInt64(v.BirthDay)
	size += encoder.CalcString(v.Phone)
	size += encoder.CalcInt32(v.Siblings)
	size += encoder.CalcBool(v.Spouse)
	size += encoder.CalcFloat64(v.Money)
	return size, nil
}

// calculate size from github.com/alecthomas/go_serialization_benchmarks.GogoProtoBufA
func ___calcMapSizeGogoProtoBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v GogoProtoBufA, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(6)
	size += encoder.CalcStringFix(4)
	size += encoder.CalcString(v.Name)
	size += encoder.CalcStringFix(8)
	size += encoder.CalcInt64(v.BirthDay)
	size += encoder.CalcStringFix(5)
	size += encoder.CalcString(v.Phone)
	size += encoder.CalcStringFix(8)
	size += encoder.CalcInt32(v.Siblings)
	size += encoder.CalcStringFix(6)
	size += encoder.CalcBool(v.Spouse)
	size += encoder.CalcStringFix(5)
	size += encoder.CalcFloat64(v.Money)
	return size, nil
}

// encode from github.com/alecthomas/go_serialization_benchmarks.GogoProtoBufA
func ___encodeArrayGogoProtoBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v GogoProtoBufA, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsArray(6, offset)
	offset = encoder.WriteString(v.Name, offset)
	offset = encoder.WriteInt64(v.BirthDay, offset)
	offset = encoder.WriteString(v.Phone, offset)
	offset = encoder.WriteInt32(v.Siblings, offset)
	offset = encoder.WriteBool(v.Spouse, offset)
	offset = encoder.WriteFloat64(v.Money, offset)
	return encoder.EncodedBytes(), offset, err
}

// encode from github.com/alecthomas/go_serialization_benchmarks.GogoProtoBufA
func ___encodeMapGogoProtoBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v GogoProtoBufA, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsMap(6, offset)
	offset = encoder.WriteStringFix("Name", 4, offset)
	offset = encoder.WriteString(v.Name, offset)
	offset = encoder.WriteStringFix("BirthDay", 8, offset)
	offset = encoder.WriteInt64(v.BirthDay, offset)
	offset = encoder.WriteStringFix("Phone", 5, offset)
	offset = encoder.WriteString(v.Phone, offset)
	offset = encoder.WriteStringFix("Siblings", 8, offset)
	offset = encoder.WriteInt32(v.Siblings, offset)
	offset = encoder.WriteStringFix("Spouse", 6, offset)
	offset = encoder.WriteBool(v.Spouse, offset)
	offset = encoder.WriteStringFix("Money", 5, offset)
	offset = encoder.WriteFloat64(v.Money, offset)
	return encoder.EncodedBytes(), offset, err
}

// decode to github.com/alecthomas/go_serialization_benchmarks.GogoProtoBufA
func ___decodeArrayGogoProtoBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v *GogoProtoBufA, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(6, offset)
	if err != nil {
		return 0, err
	}
	{
		var vv string
		vv, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		v.Name = vv
	}
	{
		var vv int64
		vv, offset, err = decoder.AsInt64(offset)
		if err != nil {
			return 0, err
		}
		v.BirthDay = vv
	}
	{
		var vv string
		vv, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		v.Phone = vv
	}
	{
		var vv int32
		vv, offset, err = decoder.AsInt32(offset)
		if err != nil {
			return 0, err
		}
		v.Siblings = vv
	}
	{
		var vv bool
		vv, offset, err = decoder.AsBool(offset)
		if err != nil {
			return 0, err
		}
		v.Spouse = vv
	}
	{
		var vv float64
		vv, offset, err = decoder.AsFloat64(offset)
		if err != nil {
			return 0, err
		}
		v.Money = vv
	}
	return offset, err
}

// decode to github.com/alecthomas/go_serialization_benchmarks.GogoProtoBufA
func ___decodeMapGogoProtoBufA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v *GogoProtoBufA, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(6, offset)
	if err != nil {
		return 0, err
	}
	count := 0
	for count < 6 {
		var s string
		s, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		switch s {
		case "Name":
			{
				var vv string
				vv, offset, err = decoder.AsString(offset)
				if err != nil {
					return 0, err
				}
				v.Name = vv
			}
			count++
		case "BirthDay":
			{
				var vv int64
				vv, offset, err = decoder.AsInt64(offset)
				if err != nil {
					return 0, err
				}
				v.BirthDay = vv
			}
			count++
		case "Phone":
			{
				var vv string
				vv, offset, err = decoder.AsString(offset)
				if err != nil {
					return 0, err
				}
				v.Phone = vv
			}
			count++
		case "Siblings":
			{
				var vv int32
				vv, offset, err = decoder.AsInt32(offset)
				if err != nil {
					return 0, err
				}
				v.Siblings = vv
			}
			count++
		case "Spouse":
			{
				var vv bool
				vv, offset, err = decoder.AsBool(offset)
				if err != nil {
					return 0, err
				}
				v.Spouse = vv
			}
			count++
		case "Money":
			{
				var vv float64
				vv, offset, err = decoder.AsFloat64(offset)
				if err != nil {
					return 0, err
				}
				v.Money = vv
			}
			count++
		default:
			return 0, fmt.Errorf("unknown key[%s] found", s)
		}
	}
	return offset, err
}

// calculate size from github.com/alecthomas/go_serialization_benchmarks.mumSerializer
func ___calcArraySizemumSerializer_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v mumSerializer, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(0)
	return size, nil
}

// calculate size from github.com/alecthomas/go_serialization_benchmarks.mumSerializer
func ___calcMapSizemumSerializer_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v mumSerializer, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(0)
	return size, nil
}

// encode from github.com/alecthomas/go_serialization_benchmarks.mumSerializer
func ___encodeArraymumSerializer_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v mumSerializer, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsArray(0, offset)
	return encoder.EncodedBytes(), offset, err
}

// encode from github.com/alecthomas/go_serialization_benchmarks.mumSerializer
func ___encodeMapmumSerializer_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v mumSerializer, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsMap(0, offset)
	return encoder.EncodedBytes(), offset, err
}

// decode to github.com/alecthomas/go_serialization_benchmarks.mumSerializer
func ___decodeArraymumSerializer_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v *mumSerializer, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(0, offset)
	if err != nil {
		return 0, err
	}
	return offset, err
}

// decode to github.com/alecthomas/go_serialization_benchmarks.mumSerializer
func ___decodeMapmumSerializer_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v *mumSerializer, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(0, offset)
	if err != nil {
		return 0, err
	}
	count := 0
	for count < 0 {
		var s string
		s, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		switch s {
		default:
			return 0, fmt.Errorf("unknown key[%s] found", s)
		}
	}
	return offset, err
}

// calculate size from github.com/alecthomas/go_serialization_benchmarks.A
func ___calcArraySizeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v A, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(6)
	size += encoder.CalcString(v.Name)
	size += encoder.CalcTime(v.BirthDay)
	size += encoder.CalcString(v.Phone)
	size += encoder.CalcInt(v.Siblings)
	size += encoder.CalcBool(v.Spouse)
	size += encoder.CalcFloat64(v.Money)
	return size, nil
}

// calculate size from github.com/alecthomas/go_serialization_benchmarks.A
func ___calcMapSizeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v A, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(6)
	size += encoder.CalcStringFix(4)
	size += encoder.CalcString(v.Name)
	size += encoder.CalcStringFix(8)
	size += encoder.CalcTime(v.BirthDay)
	size += encoder.CalcStringFix(5)
	size += encoder.CalcString(v.Phone)
	size += encoder.CalcStringFix(8)
	size += encoder.CalcInt(v.Siblings)
	size += encoder.CalcStringFix(6)
	size += encoder.CalcBool(v.Spouse)
	size += encoder.CalcStringFix(5)
	size += encoder.CalcFloat64(v.Money)
	return size, nil
}

// encode from github.com/alecthomas/go_serialization_benchmarks.A
func ___encodeArrayA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v A, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsArray(6, offset)
	offset = encoder.WriteString(v.Name, offset)
	offset = encoder.WriteTime(v.BirthDay, offset)
	offset = encoder.WriteString(v.Phone, offset)
	offset = encoder.WriteInt(v.Siblings, offset)
	offset = encoder.WriteBool(v.Spouse, offset)
	offset = encoder.WriteFloat64(v.Money, offset)
	return encoder.EncodedBytes(), offset, err
}

// encode from github.com/alecthomas/go_serialization_benchmarks.A
func ___encodeMapA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v A, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsMap(6, offset)
	offset = encoder.WriteStringFix("Name", 4, offset)
	offset = encoder.WriteString(v.Name, offset)
	offset = encoder.WriteStringFix("BirthDay", 8, offset)
	offset = encoder.WriteTime(v.BirthDay, offset)
	offset = encoder.WriteStringFix("Phone", 5, offset)
	offset = encoder.WriteString(v.Phone, offset)
	offset = encoder.WriteStringFix("Siblings", 8, offset)
	offset = encoder.WriteInt(v.Siblings, offset)
	offset = encoder.WriteStringFix("Spouse", 6, offset)
	offset = encoder.WriteBool(v.Spouse, offset)
	offset = encoder.WriteStringFix("Money", 5, offset)
	offset = encoder.WriteFloat64(v.Money, offset)
	return encoder.EncodedBytes(), offset, err
}

// decode to github.com/alecthomas/go_serialization_benchmarks.A
func ___decodeArrayA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v *A, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(6, offset)
	if err != nil {
		return 0, err
	}
	{
		var vv string
		vv, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		v.Name = vv
	}
	{
		var vv time.Time
		vv, offset, err = decoder.AsDateTime(offset)
		if err != nil {
			return 0, err
		}
		v.BirthDay = vv
	}
	{
		var vv string
		vv, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		v.Phone = vv
	}
	{
		var vv int
		vv, offset, err = decoder.AsInt(offset)
		if err != nil {
			return 0, err
		}
		v.Siblings = vv
	}
	{
		var vv bool
		vv, offset, err = decoder.AsBool(offset)
		if err != nil {
			return 0, err
		}
		v.Spouse = vv
	}
	{
		var vv float64
		vv, offset, err = decoder.AsFloat64(offset)
		if err != nil {
			return 0, err
		}
		v.Money = vv
	}
	return offset, err
}

// decode to github.com/alecthomas/go_serialization_benchmarks.A
func ___decodeMapA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v *A, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(6, offset)
	if err != nil {
		return 0, err
	}
	count := 0
	for count < 6 {
		var s string
		s, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		switch s {
		case "Name":
			{
				var vv string
				vv, offset, err = decoder.AsString(offset)
				if err != nil {
					return 0, err
				}
				v.Name = vv
			}
			count++
		case "BirthDay":
			{
				var vv time.Time
				vv, offset, err = decoder.AsDateTime(offset)
				if err != nil {
					return 0, err
				}
				v.BirthDay = vv
			}
			count++
		case "Phone":
			{
				var vv string
				vv, offset, err = decoder.AsString(offset)
				if err != nil {
					return 0, err
				}
				v.Phone = vv
			}
			count++
		case "Siblings":
			{
				var vv int
				vv, offset, err = decoder.AsInt(offset)
				if err != nil {
					return 0, err
				}
				v.Siblings = vv
			}
			count++
		case "Spouse":
			{
				var vv bool
				vv, offset, err = decoder.AsBool(offset)
				if err != nil {
					return 0, err
				}
				v.Spouse = vv
			}
			count++
		case "Money":
			{
				var vv float64
				vv, offset, err = decoder.AsFloat64(offset)
				if err != nil {
					return 0, err
				}
				v.Money = vv
			}
			count++
		default:
			return 0, fmt.Errorf("unknown key[%s] found", s)
		}
	}
	return offset, err
}

// calculate size from github.com/alecthomas/go_serialization_benchmarks.NoTimeA
func ___calcArraySizeNoTimeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v NoTimeA, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(6)
	size += encoder.CalcString(v.Name)
	size += encoder.CalcInt64(v.BirthDay)
	size += encoder.CalcString(v.Phone)
	size += encoder.CalcInt(v.Siblings)
	size += encoder.CalcBool(v.Spouse)
	size += encoder.CalcFloat64(v.Money)
	return size, nil
}

// calculate size from github.com/alecthomas/go_serialization_benchmarks.NoTimeA
func ___calcMapSizeNoTimeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v NoTimeA, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(6)
	size += encoder.CalcStringFix(4)
	size += encoder.CalcString(v.Name)
	size += encoder.CalcStringFix(8)
	size += encoder.CalcInt64(v.BirthDay)
	size += encoder.CalcStringFix(5)
	size += encoder.CalcString(v.Phone)
	size += encoder.CalcStringFix(8)
	size += encoder.CalcInt(v.Siblings)
	size += encoder.CalcStringFix(6)
	size += encoder.CalcBool(v.Spouse)
	size += encoder.CalcStringFix(5)
	size += encoder.CalcFloat64(v.Money)
	return size, nil
}

// encode from github.com/alecthomas/go_serialization_benchmarks.NoTimeA
func ___encodeArrayNoTimeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v NoTimeA, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsArray(6, offset)
	offset = encoder.WriteString(v.Name, offset)
	offset = encoder.WriteInt64(v.BirthDay, offset)
	offset = encoder.WriteString(v.Phone, offset)
	offset = encoder.WriteInt(v.Siblings, offset)
	offset = encoder.WriteBool(v.Spouse, offset)
	offset = encoder.WriteFloat64(v.Money, offset)
	return encoder.EncodedBytes(), offset, err
}

// encode from github.com/alecthomas/go_serialization_benchmarks.NoTimeA
func ___encodeMapNoTimeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v NoTimeA, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsMap(6, offset)
	offset = encoder.WriteStringFix("Name", 4, offset)
	offset = encoder.WriteString(v.Name, offset)
	offset = encoder.WriteStringFix("BirthDay", 8, offset)
	offset = encoder.WriteInt64(v.BirthDay, offset)
	offset = encoder.WriteStringFix("Phone", 5, offset)
	offset = encoder.WriteString(v.Phone, offset)
	offset = encoder.WriteStringFix("Siblings", 8, offset)
	offset = encoder.WriteInt(v.Siblings, offset)
	offset = encoder.WriteStringFix("Spouse", 6, offset)
	offset = encoder.WriteBool(v.Spouse, offset)
	offset = encoder.WriteStringFix("Money", 5, offset)
	offset = encoder.WriteFloat64(v.Money, offset)
	return encoder.EncodedBytes(), offset, err
}

// decode to github.com/alecthomas/go_serialization_benchmarks.NoTimeA
func ___decodeArrayNoTimeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v *NoTimeA, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(6, offset)
	if err != nil {
		return 0, err
	}
	{
		var vv string
		vv, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		v.Name = vv
	}
	{
		var vv int64
		vv, offset, err = decoder.AsInt64(offset)
		if err != nil {
			return 0, err
		}
		v.BirthDay = vv
	}
	{
		var vv string
		vv, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		v.Phone = vv
	}
	{
		var vv int
		vv, offset, err = decoder.AsInt(offset)
		if err != nil {
			return 0, err
		}
		v.Siblings = vv
	}
	{
		var vv bool
		vv, offset, err = decoder.AsBool(offset)
		if err != nil {
			return 0, err
		}
		v.Spouse = vv
	}
	{
		var vv float64
		vv, offset, err = decoder.AsFloat64(offset)
		if err != nil {
			return 0, err
		}
		v.Money = vv
	}
	return offset, err
}

// decode to github.com/alecthomas/go_serialization_benchmarks.NoTimeA
func ___decodeMapNoTimeA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v *NoTimeA, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(6, offset)
	if err != nil {
		return 0, err
	}
	count := 0
	for count < 6 {
		var s string
		s, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		switch s {
		case "Name":
			{
				var vv string
				vv, offset, err = decoder.AsString(offset)
				if err != nil {
					return 0, err
				}
				v.Name = vv
			}
			count++
		case "BirthDay":
			{
				var vv int64
				vv, offset, err = decoder.AsInt64(offset)
				if err != nil {
					return 0, err
				}
				v.BirthDay = vv
			}
			count++
		case "Phone":
			{
				var vv string
				vv, offset, err = decoder.AsString(offset)
				if err != nil {
					return 0, err
				}
				v.Phone = vv
			}
			count++
		case "Siblings":
			{
				var vv int
				vv, offset, err = decoder.AsInt(offset)
				if err != nil {
					return 0, err
				}
				v.Siblings = vv
			}
			count++
		case "Spouse":
			{
				var vv bool
				vv, offset, err = decoder.AsBool(offset)
				if err != nil {
					return 0, err
				}
				v.Spouse = vv
			}
			count++
		case "Money":
			{
				var vv float64
				vv, offset, err = decoder.AsFloat64(offset)
				if err != nil {
					return 0, err
				}
				v.Money = vv
			}
			count++
		default:
			return 0, fmt.Errorf("unknown key[%s] found", s)
		}
	}
	return offset, err
}

// calculate size from github.com/alecthomas/go_serialization_benchmarks.NoTimeNoStringNoFloatA
func ___calcArraySizeNoTimeNoStringNoFloatA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v NoTimeNoStringNoFloatA, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(6)
	if v.Name != nil {
		s, err := encoder.CalcSliceLength(len(v.Name), true)
		if err != nil {
			return 0, err
		}
		size += s
		for _, vv := range v.Name {
			size += encoder.CalcByte(vv)
		}
	} else {
		size += encoder.CalcNil()
	}
	size += encoder.CalcUint64(v.BirthDay)
	if v.Phone != nil {
		s, err := encoder.CalcSliceLength(len(v.Phone), true)
		if err != nil {
			return 0, err
		}
		size += s
		for _, vv := range v.Phone {
			size += encoder.CalcByte(vv)
		}
	} else {
		size += encoder.CalcNil()
	}
	size += encoder.CalcUint32(v.Siblings)
	size += encoder.CalcBool(v.Spouse)
	size += encoder.CalcUint64(v.Money)
	return size, nil
}

// calculate size from github.com/alecthomas/go_serialization_benchmarks.NoTimeNoStringNoFloatA
func ___calcMapSizeNoTimeNoStringNoFloatA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v NoTimeNoStringNoFloatA, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(6)
	size += encoder.CalcStringFix(4)
	if v.Name != nil {
		s, err := encoder.CalcSliceLength(len(v.Name), true)
		if err != nil {
			return 0, err
		}
		size += s
		for _, vv := range v.Name {
			size += encoder.CalcByte(vv)
		}
	} else {
		size += encoder.CalcNil()
	}
	size += encoder.CalcStringFix(8)
	size += encoder.CalcUint64(v.BirthDay)
	size += encoder.CalcStringFix(5)
	if v.Phone != nil {
		s, err := encoder.CalcSliceLength(len(v.Phone), true)
		if err != nil {
			return 0, err
		}
		size += s
		for _, vv := range v.Phone {
			size += encoder.CalcByte(vv)
		}
	} else {
		size += encoder.CalcNil()
	}
	size += encoder.CalcStringFix(8)
	size += encoder.CalcUint32(v.Siblings)
	size += encoder.CalcStringFix(6)
	size += encoder.CalcBool(v.Spouse)
	size += encoder.CalcStringFix(5)
	size += encoder.CalcUint64(v.Money)
	return size, nil
}

// encode from github.com/alecthomas/go_serialization_benchmarks.NoTimeNoStringNoFloatA
func ___encodeArrayNoTimeNoStringNoFloatA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v NoTimeNoStringNoFloatA, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsArray(6, offset)
	if v.Name != nil {
		offset = encoder.WriteSliceLength(len(v.Name), offset, true)
		for _, vv := range v.Name {
			offset = encoder.WriteByte(vv, offset)
		}
	} else {
		offset = encoder.WriteNil(offset)
	}
	offset = encoder.WriteUint64(v.BirthDay, offset)
	if v.Phone != nil {
		offset = encoder.WriteSliceLength(len(v.Phone), offset, true)
		for _, vv := range v.Phone {
			offset = encoder.WriteByte(vv, offset)
		}
	} else {
		offset = encoder.WriteNil(offset)
	}
	offset = encoder.WriteUint32(v.Siblings, offset)
	offset = encoder.WriteBool(v.Spouse, offset)
	offset = encoder.WriteUint64(v.Money, offset)
	return encoder.EncodedBytes(), offset, err
}

// encode from github.com/alecthomas/go_serialization_benchmarks.NoTimeNoStringNoFloatA
func ___encodeMapNoTimeNoStringNoFloatA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v NoTimeNoStringNoFloatA, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsMap(6, offset)
	offset = encoder.WriteStringFix("Name", 4, offset)
	if v.Name != nil {
		offset = encoder.WriteSliceLength(len(v.Name), offset, true)
		for _, vv := range v.Name {
			offset = encoder.WriteByte(vv, offset)
		}
	} else {
		offset = encoder.WriteNil(offset)
	}
	offset = encoder.WriteStringFix("BirthDay", 8, offset)
	offset = encoder.WriteUint64(v.BirthDay, offset)
	offset = encoder.WriteStringFix("Phone", 5, offset)
	if v.Phone != nil {
		offset = encoder.WriteSliceLength(len(v.Phone), offset, true)
		for _, vv := range v.Phone {
			offset = encoder.WriteByte(vv, offset)
		}
	} else {
		offset = encoder.WriteNil(offset)
	}
	offset = encoder.WriteStringFix("Siblings", 8, offset)
	offset = encoder.WriteUint32(v.Siblings, offset)
	offset = encoder.WriteStringFix("Spouse", 6, offset)
	offset = encoder.WriteBool(v.Spouse, offset)
	offset = encoder.WriteStringFix("Money", 5, offset)
	offset = encoder.WriteUint64(v.Money, offset)
	return encoder.EncodedBytes(), offset, err
}

// decode to github.com/alecthomas/go_serialization_benchmarks.NoTimeNoStringNoFloatA
func ___decodeArrayNoTimeNoStringNoFloatA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v *NoTimeNoStringNoFloatA, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(6, offset)
	if err != nil {
		return 0, err
	}
	if !decoder.IsCodeNil(offset) {
		var vv []byte
		var vvl int
		vvl, offset, err = decoder.SliceLength(offset)
		if err != nil {
			return 0, err
		}
		vv = make([]byte, vvl)
		for vvi := range vv {
			var vvv byte
			vvv, offset, err = decoder.AsByte(offset)
			if err != nil {
				return 0, err
			}
			vv[vvi] = vvv
		}
		v.Name = vv
	} else {
		offset++
	}
	{
		var vv uint64
		vv, offset, err = decoder.AsUint64(offset)
		if err != nil {
			return 0, err
		}
		v.BirthDay = vv
	}
	if !decoder.IsCodeNil(offset) {
		var vv []byte
		var vvl int
		vvl, offset, err = decoder.SliceLength(offset)
		if err != nil {
			return 0, err
		}
		vv = make([]byte, vvl)
		for vvi := range vv {
			var vvv byte
			vvv, offset, err = decoder.AsByte(offset)
			if err != nil {
				return 0, err
			}
			vv[vvi] = vvv
		}
		v.Phone = vv
	} else {
		offset++
	}
	{
		var vv uint32
		vv, offset, err = decoder.AsUint32(offset)
		if err != nil {
			return 0, err
		}
		v.Siblings = vv
	}
	{
		var vv bool
		vv, offset, err = decoder.AsBool(offset)
		if err != nil {
			return 0, err
		}
		v.Spouse = vv
	}
	{
		var vv uint64
		vv, offset, err = decoder.AsUint64(offset)
		if err != nil {
			return 0, err
		}
		v.Money = vv
	}
	return offset, err
}

// decode to github.com/alecthomas/go_serialization_benchmarks.NoTimeNoStringNoFloatA
func ___decodeMapNoTimeNoStringNoFloatA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v *NoTimeNoStringNoFloatA, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(6, offset)
	if err != nil {
		return 0, err
	}
	count := 0
	for count < 6 {
		var s string
		s, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		switch s {
		case "Name":
			if !decoder.IsCodeNil(offset) {
				var vv []byte
				var vvl int
				vvl, offset, err = decoder.SliceLength(offset)
				if err != nil {
					return 0, err
				}
				vv = make([]byte, vvl)
				for vvi := range vv {
					var vvv byte
					vvv, offset, err = decoder.AsByte(offset)
					if err != nil {
						return 0, err
					}
					vv[vvi] = vvv
				}
				v.Name = vv
			} else {
				offset++
			}
			count++
		case "BirthDay":
			{
				var vv uint64
				vv, offset, err = decoder.AsUint64(offset)
				if err != nil {
					return 0, err
				}
				v.BirthDay = vv
			}
			count++
		case "Phone":
			if !decoder.IsCodeNil(offset) {
				var vv []byte
				var vvl int
				vvl, offset, err = decoder.SliceLength(offset)
				if err != nil {
					return 0, err
				}
				vv = make([]byte, vvl)
				for vvi := range vv {
					var vvv byte
					vvv, offset, err = decoder.AsByte(offset)
					if err != nil {
						return 0, err
					}
					vv[vvi] = vvv
				}
				v.Phone = vv
			} else {
				offset++
			}
			count++
		case "Siblings":
			{
				var vv uint32
				vv, offset, err = decoder.AsUint32(offset)
				if err != nil {
					return 0, err
				}
				v.Siblings = vv
			}
			count++
		case "Spouse":
			{
				var vv bool
				vv, offset, err = decoder.AsBool(offset)
				if err != nil {
					return 0, err
				}
				v.Spouse = vv
			}
			count++
		case "Money":
			{
				var vv uint64
				vv, offset, err = decoder.AsUint64(offset)
				if err != nil {
					return 0, err
				}
				v.Money = vv
			}
			count++
		default:
			return 0, fmt.Errorf("unknown key[%s] found", s)
		}
	}
	return offset, err
}

// calculate size from github.com/alecthomas/go_serialization_benchmarks.AvroA
func ___calcArraySizeAvroA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v AvroA, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(0)
	return size, nil
}

// calculate size from github.com/alecthomas/go_serialization_benchmarks.AvroA
func ___calcMapSizeAvroA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v AvroA, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(0)
	return size, nil
}

// encode from github.com/alecthomas/go_serialization_benchmarks.AvroA
func ___encodeArrayAvroA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v AvroA, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsArray(0, offset)
	return encoder.EncodedBytes(), offset, err
}

// encode from github.com/alecthomas/go_serialization_benchmarks.AvroA
func ___encodeMapAvroA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v AvroA, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsMap(0, offset)
	return encoder.EncodedBytes(), offset, err
}

// decode to github.com/alecthomas/go_serialization_benchmarks.AvroA
func ___decodeArrayAvroA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v *AvroA, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(0, offset)
	if err != nil {
		return 0, err
	}
	return offset, err
}

// decode to github.com/alecthomas/go_serialization_benchmarks.AvroA
func ___decodeMapAvroA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v *AvroA, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(0, offset)
	if err != nil {
		return 0, err
	}
	count := 0
	for count < 0 {
		var s string
		s, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		switch s {
		default:
			return 0, fmt.Errorf("unknown key[%s] found", s)
		}
	}
	return offset, err
}

// calculate size from github.com/alecthomas/go_serialization_benchmarks.Avro2Txt
func ___calcArraySizeAvro2Txt_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v Avro2Txt, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(0)
	return size, nil
}

// calculate size from github.com/alecthomas/go_serialization_benchmarks.Avro2Txt
func ___calcMapSizeAvro2Txt_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v Avro2Txt, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(0)
	return size, nil
}

// encode from github.com/alecthomas/go_serialization_benchmarks.Avro2Txt
func ___encodeArrayAvro2Txt_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v Avro2Txt, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsArray(0, offset)
	return encoder.EncodedBytes(), offset, err
}

// encode from github.com/alecthomas/go_serialization_benchmarks.Avro2Txt
func ___encodeMapAvro2Txt_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v Avro2Txt, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsMap(0, offset)
	return encoder.EncodedBytes(), offset, err
}

// decode to github.com/alecthomas/go_serialization_benchmarks.Avro2Txt
func ___decodeArrayAvro2Txt_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v *Avro2Txt, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(0, offset)
	if err != nil {
		return 0, err
	}
	return offset, err
}

// decode to github.com/alecthomas/go_serialization_benchmarks.Avro2Txt
func ___decodeMapAvro2Txt_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v *Avro2Txt, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(0, offset)
	if err != nil {
		return 0, err
	}
	count := 0
	for count < 0 {
		var s string
		s, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		switch s {
		default:
			return 0, fmt.Errorf("unknown key[%s] found", s)
		}
	}
	return offset, err
}

// calculate size from github.com/alecthomas/go_serialization_benchmarks.Avro2Bin
func ___calcArraySizeAvro2Bin_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v Avro2Bin, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(0)
	return size, nil
}

// calculate size from github.com/alecthomas/go_serialization_benchmarks.Avro2Bin
func ___calcMapSizeAvro2Bin_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v Avro2Bin, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(0)
	return size, nil
}

// encode from github.com/alecthomas/go_serialization_benchmarks.Avro2Bin
func ___encodeArrayAvro2Bin_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v Avro2Bin, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsArray(0, offset)
	return encoder.EncodedBytes(), offset, err
}

// encode from github.com/alecthomas/go_serialization_benchmarks.Avro2Bin
func ___encodeMapAvro2Bin_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v Avro2Bin, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsMap(0, offset)
	return encoder.EncodedBytes(), offset, err
}

// decode to github.com/alecthomas/go_serialization_benchmarks.Avro2Bin
func ___decodeArrayAvro2Bin_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v *Avro2Bin, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(0, offset)
	if err != nil {
		return 0, err
	}
	return offset, err
}

// decode to github.com/alecthomas/go_serialization_benchmarks.Avro2Bin
func ___decodeMapAvro2Bin_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v *Avro2Bin, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(0, offset)
	if err != nil {
		return 0, err
	}
	count := 0
	for count < 0 {
		var s string
		s, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		switch s {
		default:
			return 0, fmt.Errorf("unknown key[%s] found", s)
		}
	}
	return offset, err
}

// calculate size from github.com/alecthomas/go_serialization_benchmarks.XDRA
func ___calcArraySizeXDRA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v XDRA, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(6)
	size += encoder.CalcString(v.Name)
	size += encoder.CalcInt64(v.BirthDay)
	size += encoder.CalcString(v.Phone)
	size += encoder.CalcInt32(v.Siblings)
	size += encoder.CalcBool(v.Spouse)
	size += encoder.CalcUint64(v.Money)
	return size, nil
}

// calculate size from github.com/alecthomas/go_serialization_benchmarks.XDRA
func ___calcMapSizeXDRA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v XDRA, encoder *enc.Encoder) (int, error) {
	size := 0
	size += encoder.CalcStructHeaderFix(6)
	size += encoder.CalcStringFix(4)
	size += encoder.CalcString(v.Name)
	size += encoder.CalcStringFix(8)
	size += encoder.CalcInt64(v.BirthDay)
	size += encoder.CalcStringFix(5)
	size += encoder.CalcString(v.Phone)
	size += encoder.CalcStringFix(8)
	size += encoder.CalcInt32(v.Siblings)
	size += encoder.CalcStringFix(6)
	size += encoder.CalcBool(v.Spouse)
	size += encoder.CalcStringFix(5)
	size += encoder.CalcUint64(v.Money)
	return size, nil
}

// encode from github.com/alecthomas/go_serialization_benchmarks.XDRA
func ___encodeArrayXDRA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v XDRA, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsArray(6, offset)
	offset = encoder.WriteString(v.Name, offset)
	offset = encoder.WriteInt64(v.BirthDay, offset)
	offset = encoder.WriteString(v.Phone, offset)
	offset = encoder.WriteInt32(v.Siblings, offset)
	offset = encoder.WriteBool(v.Spouse, offset)
	offset = encoder.WriteUint64(v.Money, offset)
	return encoder.EncodedBytes(), offset, err
}

// encode from github.com/alecthomas/go_serialization_benchmarks.XDRA
func ___encodeMapXDRA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v XDRA, encoder *enc.Encoder, offset int) ([]byte, int, error) {
	var err error
	offset = encoder.WriteStructHeaderFixAsMap(6, offset)
	offset = encoder.WriteStringFix("Name", 4, offset)
	offset = encoder.WriteString(v.Name, offset)
	offset = encoder.WriteStringFix("BirthDay", 8, offset)
	offset = encoder.WriteInt64(v.BirthDay, offset)
	offset = encoder.WriteStringFix("Phone", 5, offset)
	offset = encoder.WriteString(v.Phone, offset)
	offset = encoder.WriteStringFix("Siblings", 8, offset)
	offset = encoder.WriteInt32(v.Siblings, offset)
	offset = encoder.WriteStringFix("Spouse", 6, offset)
	offset = encoder.WriteBool(v.Spouse, offset)
	offset = encoder.WriteStringFix("Money", 5, offset)
	offset = encoder.WriteUint64(v.Money, offset)
	return encoder.EncodedBytes(), offset, err
}

// decode to github.com/alecthomas/go_serialization_benchmarks.XDRA
func ___decodeArrayXDRA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v *XDRA, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(6, offset)
	if err != nil {
		return 0, err
	}
	{
		var vv string
		vv, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		v.Name = vv
	}
	{
		var vv int64
		vv, offset, err = decoder.AsInt64(offset)
		if err != nil {
			return 0, err
		}
		v.BirthDay = vv
	}
	{
		var vv string
		vv, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		v.Phone = vv
	}
	{
		var vv int32
		vv, offset, err = decoder.AsInt32(offset)
		if err != nil {
			return 0, err
		}
		v.Siblings = vv
	}
	{
		var vv bool
		vv, offset, err = decoder.AsBool(offset)
		if err != nil {
			return 0, err
		}
		v.Spouse = vv
	}
	{
		var vv uint64
		vv, offset, err = decoder.AsUint64(offset)
		if err != nil {
			return 0, err
		}
		v.Money = vv
	}
	return offset, err
}

// decode to github.com/alecthomas/go_serialization_benchmarks.XDRA
func ___decodeMapXDRA_dd450b3568aeca1e592f09df9c4397c3c202e4bf15bc89215d4b28d1b990d189(v *XDRA, decoder *dec.Decoder, offset int) (int, error) {
	offset, err := decoder.CheckStructHeader(6, offset)
	if err != nil {
		return 0, err
	}
	count := 0
	for count < 6 {
		var s string
		s, offset, err = decoder.AsString(offset)
		if err != nil {
			return 0, err
		}
		switch s {
		case "Name":
			{
				var vv string
				vv, offset, err = decoder.AsString(offset)
				if err != nil {
					return 0, err
				}
				v.Name = vv
			}
			count++
		case "BirthDay":
			{
				var vv int64
				vv, offset, err = decoder.AsInt64(offset)
				if err != nil {
					return 0, err
				}
				v.BirthDay = vv
			}
			count++
		case "Phone":
			{
				var vv string
				vv, offset, err = decoder.AsString(offset)
				if err != nil {
					return 0, err
				}
				v.Phone = vv
			}
			count++
		case "Siblings":
			{
				var vv int32
				vv, offset, err = decoder.AsInt32(offset)
				if err != nil {
					return 0, err
				}
				v.Siblings = vv
			}
			count++
		case "Spouse":
			{
				var vv bool
				vv, offset, err = decoder.AsBool(offset)
				if err != nil {
					return 0, err
				}
				v.Spouse = vv
			}
			count++
		case "Money":
			{
				var vv uint64
				vv, offset, err = decoder.AsUint64(offset)
				if err != nil {
					return 0, err
				}
				v.Money = vv
			}
			count++
		default:
			return 0, fmt.Errorf("unknown key[%s] found", s)
		}
	}
	return offset, err
}
