// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package goserbench

import (
	json "encoding/json"

	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

var _ = json.RawMessage{} // suppress unused package warning

func easyjson_decode_go_serialization_benchmarks_A(in *jlexer.Lexer, out *A) {
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = in.String()
		case "BirthDay":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BirthDay).UnmarshalJSON(data))
			}
		case "Phone":
			out.Phone = in.String()
		case "Siblings":
			out.Siblings = in.Int()
		case "Spouse":
			out.Spouse = in.Bool()
		case "Money":
			out.Money = in.Float64()
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_go_serialization_benchmarks_A(out *jwriter.Writer, in *A) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Name\":")
	out.String(in.Name)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"BirthDay\":")
	out.Raw((in.BirthDay).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Phone\":")
	out.String(in.Phone)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Siblings\":")
	out.Int(in.Siblings)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Spouse\":")
	out.Bool(in.Spouse)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Money\":")
	out.Float64(in.Money)
	out.RawByte('}')
}
func (v *A) MarshalJSONEasyJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_go_serialization_benchmarks_A(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *A) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_go_serialization_benchmarks_A(w, v)
}
func (v *A) UnmarshalJSONEasyJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_go_serialization_benchmarks_A(&r, v)
	return r.Error()
}
func (v *A) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_go_serialization_benchmarks_A(l, v)
}
